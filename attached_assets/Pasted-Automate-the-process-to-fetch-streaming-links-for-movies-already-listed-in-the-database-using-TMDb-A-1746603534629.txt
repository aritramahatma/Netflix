Automate the process to fetch streaming links for movies already listed in the database using TMDb API for metadata (title, poster, etc.) and Vidsrc API for streaming links.

1. Fetch Existing Movie Metadata:

Movies already stored in the database have metadata that has been fetched from the TMDb API. These include details like:

TMDb ID

Title

Release Date

Poster Image

Example of a movie record in MongoDB:

json
Copy
Edit
{
   "tmdb_id": 12345,
   "title": "Movie Title",
   "release_date": "2021-10-01",
   "poster": "url_to_poster_image"
}
2. Fetch Streaming Link using Vidsrc API:

For each movie, use Vidsrc API to fetch the streaming link for the movie. This can be done by using the TMDb ID.

API Endpoint for Vidsrc (Example):

bash
Copy
Edit
https://api.vidsrc.me/{tmdb_id}/embed
When the API returns a valid response, extract the streaming link.

Example of API Response:

json
Copy
Edit
{
    "embed_link": "https://vidsrc.me/embed/xyz123"
}
3. Update MongoDB with Streaming Link:

Once the streaming link is fetched, update the existing movie record in MongoDB with the streaming link.

MongoDB update example:

python
Copy
Edit
import pymongo

client = pymongo.MongoClient("mongodb://your_mongo_uri")
db = client["movies_db"]
collection = db["movies"]

def update_stream_link(tmdb_id, stream_link):
    collection.update_one(
        {"tmdb_id": tmdb_id},
        {"$set": {"streaming_link": stream_link}},
        upsert=False
    )
4. Automated Update Process:

Create a script that runs periodically (e.g., daily) to check all movies without a streaming link and automatically fetch and update them.

Example Python code:

python
Copy
Edit
import requests
import pymongo
import time

# MongoDB setup
client = pymongo.MongoClient("mongodb://your_mongo_uri")
db = client["movies_db"]
collection = db["movies"]

def fetch_stream_link(tmdb_id):
    url = f"https://api.vidsrc.me/{tmdb_id}/embed"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json().get('embed_link')
    return None

def update_stream_link(tmdb_id, stream_link):
    collection.update_one(
        {"tmdb_id": tmdb_id},
        {"$set": {"streaming_link": stream_link}},
        upsert=False
    )

def update_existing_movies():
    # Get all movies without stream link
    movies = collection.find({"streaming_link": {"$exists": False}})
    
    for movie in movies:
        stream_link = fetch_stream_link(movie['tmdb_id'])
        if stream_link:
            update_stream_link(movie['tmdb_id'], stream_link)
            print(f"Updated stream link for {movie['title']}")

# Schedule the task to run periodically (e.g., every 24 hours)
while True:
    update_existing_movies()
    time.sleep(86400)  # Sleep for 24 hours
5. Setting Up Cron Jobs or Scheduled Tasks:

To ensure that the automation runs periodically, set up a cron job or scheduled task that triggers this script daily or weekly, depending on your needs.

In Replit, you can use the cron job functionality by scheduling the script to run at specific intervals.

6. Expected Flow:

Fetch movie metadata from TMDb API (title, release date, poster).

For each movie, use Vidsrc API to fetch the streaming link using TMDb ID.

Update MongoDB with the fetched streaming link.

Automation: Set up a scheduled task to repeat the process periodically (daily or weekly) to update the movies.

Deliverables:

Python script for fetching streaming links using Vidsrc API.

MongoDB update function to store the stream link.

Scheduling automation to run the process regularly.